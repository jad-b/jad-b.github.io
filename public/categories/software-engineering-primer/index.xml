<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Software Engineering Primer on while true: continue</title>
    <link>http://jad-b.github.io/categories/software-engineering-primer/</link>
    <description>Recent content in Software Engineering Primer on while true: continue</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 07 Feb 2017 11:02:48 -0500</lastBuildDate>
    <atom:link href="http://jad-b.github.io/categories/software-engineering-primer/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Principles</title>
      <link>http://jad-b.github.io/seprimer/o16n/monitoring/Principles/</link>
      <pubDate>Tue, 07 Feb 2017 11:02:48 -0500</pubDate>
      
      <guid>http://jad-b.github.io/seprimer/o16n/monitoring/Principles/</guid>
      <description>

&lt;h1 id=&#34;the-4-golden-signals:b873348abd608cddcdafcc855275b9ea&#34;&gt;The 4 Golden Signals&lt;/h1&gt;

&lt;p&gt;Latency, Traffic, Errors, Saturation.&lt;/p&gt;

&lt;h1 id=&#34;the-3-types-of-output:b873348abd608cddcdafcc855275b9ea&#34;&gt;The 3 Types of Output&lt;/h1&gt;

&lt;p&gt;A &lt;em&gt;page&lt;/em&gt; (Human fix now!), a &lt;em&gt;ticket&lt;/em&gt; (Human fix soon), or logs (Human look at
some day).&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Principles</title>
      <link>http://jad-b.github.io/seprimer/o16n/monitoring/Principles/</link>
      <pubDate>Tue, 07 Feb 2017 11:02:29 -0500</pubDate>
      
      <guid>http://jad-b.github.io/seprimer/o16n/monitoring/Principles/</guid>
      <description></description>
    </item>
    
    <item>
      <title>datetime</title>
      <link>http://jad-b.github.io/seprimer/restapi/datetime/</link>
      <pubDate>Thu, 12 Jan 2017 12:24:46 -0500</pubDate>
      
      <guid>http://jad-b.github.io/seprimer/restapi/datetime/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Test-Driven Development</title>
      <link>http://jad-b.github.io/seprimer/testing/tdd/</link>
      <pubDate>Mon, 09 Jan 2017 10:34:58 -0500</pubDate>
      
      <guid>http://jad-b.github.io/seprimer/testing/tdd/</guid>
      <description>

&lt;h1 id=&#34;key-insights:db52d24e1792a2e243722d69f812b736&#34;&gt;Key Insights&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;70/20/10% split of unit/integration/system tests&lt;/li&gt;
&lt;li&gt;The scope/level of your tests should match the size of your questions about
the work to be done.&lt;/li&gt;
&lt;li&gt;Behavior is easier to test than exectuion. Use black-box testing until you
can&amp;rsquo;t, then switch to white-box.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;definitions:db52d24e1792a2e243722d69f812b736&#34;&gt;Definitions&lt;/h1&gt;

&lt;dl&gt;
&lt;dt&gt;Testing&lt;/dt&gt;
&lt;dd&gt;An investigation conducted to provide stakeholders with information about the
quality of the product or service under test - &lt;a href=&#34;https://en.wikipedia.org/wiki/Software_testing&#34;&gt;Wikipedia&lt;/a&gt;&lt;/dd&gt;
&lt;dt&gt;System Testing
:&lt;/dt&gt;
&lt;/dl&gt;

&lt;h2 id=&#34;your-level-is-your-scope:db52d24e1792a2e243722d69f812b736&#34;&gt;Your Level is Your Scope&lt;/h2&gt;

&lt;p&gt;Here&amp;rsquo;s a picture:
&lt;img src=&#34;https://2.bp.blogspot.com/-YTzv_O4TnkA/VTgexlumP1I/AAAAAAAAAJ8/57-rnwyvP6g/s1600/image02.png&#34; alt=&#34;Google Testing Pyramid&#34; title=&#34;Unit:Integration:System in a 7:2:1 ratio&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;unit-testing:db52d24e1792a2e243722d69f812b736&#34;&gt;Unit Testing&lt;/h2&gt;

&lt;h2 id=&#34;the-process:db52d24e1792a2e243722d69f812b736&#34;&gt;The Process&lt;/h2&gt;

&lt;p&gt;When writing code in a TDD fashion, you test outside-in, first identifying the
&lt;em&gt;scope&lt;/em&gt; of the work to be done, writing a test at that level, then repeating
recursively until you&amp;rsquo;ve isolated a Smallest Unit of Work[2]. Progress is then
made by popping the stack, fixing tests low-to-high until everything&amp;rsquo;s passing.&lt;/p&gt;

&lt;p&gt;This also makes TDD a fantastic design process when you don&amp;rsquo;t know where to
start. Simply write a test that encapsulates the highest-level of interaction
you have questions about. If this is for an HTTP API, write end-to-end tests as
the client. If you are uncertain about the DB interactions, write integration
tests between API request handlers and the DB. If the UI gives you trouble,
well, that sucks - UI testing is the worst. But tools for such things exist.&lt;/p&gt;

&lt;p&gt;A note on discipline&lt;/p&gt;

&lt;h3 id=&#34;mocking:db52d24e1792a2e243722d69f812b736&#34;&gt;Mocking&lt;/h3&gt;

&lt;p&gt;A brief tour of the different &lt;a href=&#34;https://8thlight.com/blog/uncle-bob/2014/05/14/TheLittleMocker.html&#34;&gt;levels of mocking&lt;/a&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A &lt;em&gt;Dummy&lt;/em&gt; satisfies an interface, but is(&amp;ldquo;should&amp;rdquo;) never be used in the tested
code path.&lt;/li&gt;
&lt;li&gt;A &lt;em&gt;Stub&lt;/em&gt; extends the Dummy to offer a default, unchanging behavior.&lt;/li&gt;
&lt;li&gt;A &lt;em&gt;Spy&lt;/em&gt; extends a Stub to become aware of its own execution; recording its own
invocations, for instance. It can introspect what it&amp;rsquo;s doing, but it doesn&amp;rsquo;t
know why - this makes more sense when compared again&amp;hellip;&lt;/li&gt;
&lt;li&gt;A &lt;em&gt;Mock&lt;/em&gt; extends the Spy to become aware of the test&amp;rsquo;s &lt;em&gt;purpose&lt;/em&gt;.
&amp;ldquo;Mocks know what they are testing&amp;rdquo;&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:db52d24e1792a2e243722d69f812b736:https-8thlight-com-blog-uncle-bob-2014-05-14-TheLittleMocker-html&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:db52d24e1792a2e243722d69f812b736:https-8thlight-com-blog-uncle-bob-2014-05-14-TheLittleMocker-html&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;. They have this knowledge by their
inclusion of built-in assertions.&lt;/li&gt;
&lt;li&gt;A &lt;em&gt;Fake&lt;/em&gt; is different from the rest. A Fake is an actual implementation of
real business logic. It has real, programmable behavior beyond that of a
Stub&amp;rsquo;s naive implementation. A good Fake needs its own tests.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;[2]: You may see this again.&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:db52d24e1792a2e243722d69f812b736:https-8thlight-com-blog-uncle-bob-2014-05-14-TheLittleMocker-html&#34;&gt; &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:db52d24e1792a2e243722d69f812b736:https-8thlight-com-blog-uncle-bob-2014-05-14-TheLittleMocker-html&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Versioning</title>
      <link>http://jad-b.github.io/seprimer/delivery/Versioning/</link>
      <pubDate>Tue, 20 Dec 2016 11:18:47 -0500</pubDate>
      
      <guid>http://jad-b.github.io/seprimer/delivery/Versioning/</guid>
      <description>

&lt;h1 id=&#34;versioning:5a4b99c21b081609fa42f039ef972d42&#34;&gt;Versioning&lt;/h1&gt;

&lt;h2 id=&#34;key-points:5a4b99c21b081609fa42f039ef972d42&#34;&gt;Key Points&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Versions provide for human-readable ordering.&lt;/li&gt;
&lt;li&gt;Checksums provide &lt;em&gt;equality&lt;/em&gt;-operations.&lt;/li&gt;
&lt;li&gt;Semantic Versioning is a great place to start. Use prerelease and build
information to customize as to your team&amp;rsquo;s own practices.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;versions-checksums:5a4b99c21b081609fa42f039ef972d42&#34;&gt;Versions &amp;amp; Checksums&lt;/h2&gt;

&lt;p&gt;All of the Continuous Whatevers we&amp;rsquo;re about to address is enabled by versioning,
and for a simple reason: Versioning provides &lt;em&gt;orderable&lt;/em&gt; definition of state.
Without it, you simply &lt;em&gt;can not&lt;/em&gt; efficiently reason changes to a codebase. And
if you don&amp;rsquo;t know &lt;em&gt;what&lt;/em&gt; was, is, and will be running, how could you possibly
understand what&amp;rsquo;s going on in your codebase?&lt;/p&gt;

&lt;p&gt;A related topic is &lt;strong&gt;checksums&lt;/strong&gt;. A checksum is a hash of the contents of
file(s) that gives you an absolute reference point; if &lt;em&gt;anything&lt;/em&gt; changes, the
checksum changes. This makes them fantastic for asking &amp;ldquo;are these two things the
same?&amp;ldquo;, but gives you no information regarding which came first. You could
extend a checksum with an auto-incrementing integer, providing a notion of
sequence, but your VCS is already doing this for you.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ll posit that versions should be &lt;em&gt;human&lt;/em&gt;-readable, for a simple reason: a
person is needed for input, and a human consumes the output.
The information conveyed by a semantic version regarding major, minor, or patch-level
changes must be provided by a human&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:5a4b99c21b081609fa42f039ef972d42:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:5a4b99c21b081609fa42f039ef972d42:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;, and the output is a version
that &lt;em&gt;should&lt;/em&gt; influence a human as to how code is deployed. Remember: automation
is doing what a human said to do, given certain input.&lt;/p&gt;

&lt;h2 id=&#34;how-to-version:5a4b99c21b081609fa42f039ef972d42&#34;&gt;How to version&lt;/h2&gt;

&lt;p&gt;Semantic Versioning has become a popular standard for versioning across
open-source projects. It&amp;rsquo;s intuitive, it supplies a standard set of meanings,
and is sufficiently extendable to generalize across different product&amp;rsquo;s use
cases. As such, it&amp;rsquo;s the basis of what I&amp;rsquo;ll propose here.&lt;/p&gt;

&lt;p&gt;Given a version such as &lt;code&gt;Major.Minor.Patch&lt;/code&gt;, it breaks down to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Major&lt;/code&gt;: API-breaking changes.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Minor&lt;/code&gt;: New functionality.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Patch&lt;/code&gt;: Bug fixes.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;code&gt;Patch&lt;/code&gt; &amp;lt; &lt;code&gt;Minor&lt;/code&gt; &amp;lt; &lt;code&gt;Major&lt;/code&gt;, as far as ordering goes. If you bump the version by
&lt;code&gt;Major&lt;/code&gt;, you zero out &lt;code&gt;Minor&lt;/code&gt; and &lt;code&gt;Patch&lt;/code&gt;; bump by a &lt;code&gt;Minor&lt;/code&gt;, zero just &lt;code&gt;Patch&lt;/code&gt;.
Simple. You start with &lt;code&gt;0.1.0&lt;/code&gt; as your first commit, and go to 1.0.0 when
you&amp;rsquo;re used by customers in production, your API has stabilized, or you already
have concerns about backwards compatbility.&lt;/p&gt;

&lt;h3 id=&#34;extending-the-version-for-stages-of-development:5a4b99c21b081609fa42f039ef972d42&#34;&gt;Extending the Version for Stages of Development&lt;/h3&gt;

&lt;p&gt;Few of us write code on production machines that live-reload the daemon every
time you hit save. We can consider any and all verifications and
validations&lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:5a4b99c21b081609fa42f039ef972d42:2&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:5a4b99c21b081609fa42f039ef972d42:2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; as &amp;ldquo;stages&amp;rdquo; in a code change. With that rough definition, we can
easily imagine the following checks in committing a change to a web server:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Code builds, unit tests and static code analysis pass.&lt;/li&gt;
&lt;li&gt;Functional tests pass against the server&lt;/li&gt;
&lt;li&gt;Code deploys to a test environment &amp;amp; acceptance tests pass&lt;/li&gt;
&lt;li&gt;Code deploys to a staging environment &amp;amp; acceptance tests pass&lt;/li&gt;
&lt;li&gt;Code deploys to production &amp;amp; acceptance tests pass&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;And each stage can itself be composed of stages. Take the first step of building
code; it could go across multiple components, libraries, and even languages.
Unit tests exist for each component, and could have certain criteria for
coverage.  Static code analysis tooling could be anything from &amp;ldquo;best practice&amp;rdquo;
checks to dead code finders to static type checkers to AST optimizers to
what-have-you.&lt;/p&gt;

&lt;p&gt;Point is, you may want to have your version indicate &lt;em&gt;where&lt;/em&gt; it is in this
gauntlet of quality control. Fortunately, SemVer provides for this through the
use of a &lt;code&gt;-&lt;/code&gt; followed by any number of &lt;code&gt;.&lt;/code&gt;-separated identifiers: &lt;code&gt;-alpha&lt;/code&gt;,
&lt;code&gt;-dev3.rc1&lt;/code&gt;, &lt;code&gt;a1.b2.c3&lt;/code&gt;, etc. Let&amp;rsquo;s say your team has three significantly
meaningful stages in your CI pipeline: I Changed Something (Local), Worked On My
Box (commit), Works Against Other People&amp;rsquo;s Code (Integration), Works Against
Production (Staging). Let&amp;rsquo;s assume the last tagged version was 1.2.3, and we
have a &lt;code&gt;minor&lt;/code&gt; change worth of changes queued up. We could denote their
successful passage using extensions such as:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Local:  1.3.0-local3+abc123 (Three commits past 1.2.3, read on for an
explanation of the &lt;code&gt;+abc123&lt;/code&gt;)&lt;/li&gt;
&lt;li&gt;Commit:  1.3.0-dev3&lt;/li&gt;
&lt;li&gt;Integration: 1.3.0-int3&lt;/li&gt;
&lt;li&gt;Staging: 1.3.0-stage3&lt;/li&gt;
&lt;li&gt;Production: 1.3.0&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Note that we immediately go to &lt;code&gt;1.3.0&lt;/code&gt;. Since only the &lt;code&gt;master&lt;/code&gt; branch is tested
through our deployments, the pre-release modifiers uniquely identify which point
in &lt;code&gt;master&lt;/code&gt;&amp;rsquo;s history we&amp;rsquo;re talking about.&lt;/p&gt;

&lt;p&gt;Since everyone&amp;rsquo;s environments and practices will be different, you &lt;strong&gt;must&lt;/strong&gt;
evaluate the important stages of your own team&amp;rsquo;s development, and create your
own version extensions. Discuss it as a team, as ambiguity in a version defeats
its purpose.&lt;/p&gt;

&lt;p&gt;What about the &lt;code&gt;+abc123&lt;/code&gt;? That&amp;rsquo;s a &lt;strong&gt;build identifier&lt;/strong&gt;. When we&amp;rsquo;re working
locally, your three commits past 1.2.3 will look different than my three
commits past 1.2.3. We can differentiate between the two using the build
information; in this, a selection of git&amp;rsquo;s SHA1 commit hash works well. When we
commit to &lt;code&gt;master&lt;/code&gt;, our work is forced to become ordered, and we no longer have
a version conflict. Build identifiers are useful for differentiating on
operations &lt;em&gt;outside&lt;/em&gt; of the code; repeated builds on your CI server come to
mind, perhaps during debugging or troubleshooting dependent services.&lt;/p&gt;

&lt;h2 id=&#34;versioning-and-test-driven-development-a-good-match:5a4b99c21b081609fa42f039ef972d42&#34;&gt;Versioning and Test-Driven Development: A Good Match&lt;/h2&gt;

&lt;p&gt;We know what a version should &lt;em&gt;mean&lt;/em&gt;, and how its pieces compose to convey that
meaning. But real life is messy, and exactly &lt;em&gt;when&lt;/em&gt; a version-worthy change goes
into effect can be messy. I propose a simple test that enforces good habits: A
change goes into effect when its corresponding test(s) passes. Simple, clear,
and meaningful.&lt;/p&gt;

&lt;h2 id=&#34;putting-it-into-practice:5a4b99c21b081609fa42f039ef972d42&#34;&gt;Putting it into practice&lt;/h2&gt;

&lt;p&gt;Write your code. When you go to commit your work into git, include metadata
within the commit message indicating what the work is for (work ticket number,
associated project ID, whatever). When the flagship test for your
feature-change/bug-fix passes, you cut your version. Even better, you include a
machine-readable directive within your commit message that tells your
auto-versioning function/build step/CI job to version &lt;em&gt;for&lt;/em&gt; you.&lt;/p&gt;

&lt;h2 id=&#34;resources:5a4b99c21b081609fa42f039ef972d42&#34;&gt;Resources&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://semver.org&#34;&gt;SemVer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;A SemVer-compatible SemVer enabler: &lt;a href=&#34;https://github.com/pypa/setuptools_scm&#34;&gt;setuptools_scm&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:5a4b99c21b081609fa42f039ef972d42:1&#34;&gt;As of today.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:5a4b99c21b081609fa42f039ef972d42:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;

&lt;li id=&#34;fn:5a4b99c21b081609fa42f039ef972d42:2&#34;&gt;&lt;p&gt;Yep, those are two different things:
&lt;a href=&#34;https://en.wikipedia.org/wiki/Software_verification_and_validation&#34;&gt;https://en.wikipedia.org/wiki/Software_verification_and_validation&lt;/a&gt;&lt;/p&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:5a4b99c21b081609fa42f039ef972d42:2&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Planning Your Project</title>
      <link>http://jad-b.github.io/seprimer/mgmt/Planning%20Your%20Project/</link>
      <pubDate>Sat, 17 Dec 2016 12:20:35 -0500</pubDate>
      
      <guid>http://jad-b.github.io/seprimer/mgmt/Planning%20Your%20Project/</guid>
      <description>

&lt;h2 id=&#34;prototyping:4db0d198b6340a9acf9da601f70c4242&#34;&gt;Prototyping&lt;/h2&gt;

&lt;p&gt;The goal of prototyping is to answer questions. How will component A talk to
system B? What will deployment look like? The end-user&amp;rsquo;s non-technical - what
will their interactions look like? Is having the DB in a different datacenter
going to noticeably slow things down to the point we care?&lt;/p&gt;

&lt;p&gt;That last point is especially important - how will people use this thing? If
you&amp;rsquo;re writing a chat bot, what kind of interactions feel &amp;ldquo;natural&amp;rdquo; to the user?
If you have &lt;em&gt;something&lt;/em&gt; they can query, you don&amp;rsquo;t have to wonder, you can simply
find out.&lt;/p&gt;

&lt;p&gt;Is this an MVP? I say it&amp;rsquo;s not. The difference being people often think you
iterate upon your MVP, where as a prototype &lt;strong&gt;needs to be thrown away&lt;/strong&gt;. Its
purpose isn&amp;rsquo;t to be built upon, it&amp;rsquo;s to answer questions. If you made it good
enough to keep around, you spent too much time on it. Maybe, on a mature team
with mature tooling, there won&amp;rsquo;t be much change between your prototype and the
final product - OK. But now is the time for speed and discovery; if it slows you
down, don&amp;rsquo;t do it now.&lt;/p&gt;

&lt;h2 id=&#34;iterating:4db0d198b6340a9acf9da601f70c4242&#34;&gt;Iterating&lt;/h2&gt;

&lt;p&gt;Alright, you&amp;rsquo;ve watched it work, and answered a slew of questions along the way.
But you have to run the commands manually, the whole thing&amp;rsquo;s actually three
shell scripts, and you&amp;rsquo;d be ashamed to let anyone you respect see your work. In
other words, you nailed the prototype. Now build it.&lt;/p&gt;

&lt;p&gt;Again, I recommend ignoring what you&amp;rsquo;ve coded so far. Whereas before you
stitched five libraries together to do what you want, maybe you reach for the
heavier-weight framework that does it all for you. Good job! You figured out
using that framework was worth the lock-in and opinionation using it entails.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>index</title>
      <link>http://jad-b.github.io/seprimer/restapi/</link>
      <pubDate>Sat, 17 Dec 2016 12:18:21 -0500</pubDate>
      
      <guid>http://jad-b.github.io/seprimer/restapi/</guid>
      <description>&lt;ol&gt;
&lt;li&gt;A RESTful API

&lt;ol&gt;
&lt;li&gt;Popular - Perhaps, Too Popular&lt;/li&gt;
&lt;li&gt;Key Components

&lt;ol&gt;
&lt;li&gt;HTTP APIs

&lt;ol&gt;
&lt;li&gt;Routing&lt;/li&gt;
&lt;li&gt;Error Handling&lt;/li&gt;
&lt;li&gt;Configuration&lt;/li&gt;
&lt;li&gt;Context Management&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;RESTful Extensions

&lt;ol&gt;
&lt;li&gt;Resource Types&lt;/li&gt;
&lt;li&gt;Content-Negotation&lt;/li&gt;
&lt;li&gt;Validation&lt;/li&gt;
&lt;li&gt;HATEOAS&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>about</title>
      <link>http://jad-b.github.io/seprimer/about/</link>
      <pubDate>Sat, 17 Dec 2016 11:41:37 -0500</pubDate>
      
      <guid>http://jad-b.github.io/seprimer/about/</guid>
      <description>

&lt;h2 id=&#34;the-motivation-for-this-book:6083a88ee3411b0d17ce02d738f69d47&#34;&gt;The Motivation For This Book&lt;/h2&gt;

&lt;p&gt;This book aims to provide Software Engineers with sensible, modern defaults for
for delivering high-quality software. It goes further in that it also tries to
&lt;em&gt;teach&lt;/em&gt; the process behind arriving at these decisions, enabling engineers to
start with the suggestions in this book, modify them in the light of real-life
situations, and arrive at the optimal outcome.&lt;/p&gt;

&lt;p&gt;Develop as an engineer, produce superior work, and save time along the way - not
bad for reading sequences of words that we collectively made-up out of also
made-up symbols. Kind of amazing any of this works, actually. But I digress.&lt;/p&gt;

&lt;h2 id=&#34;who-should-read-this-book:6083a88ee3411b0d17ce02d738f69d47&#34;&gt;Who Should Read This Book&lt;/h2&gt;

&lt;p&gt;Junior-ish engineers, by which I&amp;rsquo;ll define as having less than five years
experience, will probably get the most out of this book. This is assuming that
this engineer is destined for greatness anyway, and that giving them missing
information gives them a jump on the path before them.&lt;/p&gt;

&lt;p&gt;TODO: Building a house&lt;/p&gt;

&lt;p&gt;That said, lets interpolate the ideal case to the common. Anyone who feels like
they&amp;rsquo;ve stagnated in their development, perhaps from a less-than-modern development
culture, could benefit from &lt;em&gt;parts&lt;/em&gt; of the book. Get your logging standards
up-to-par, or base your team&amp;rsquo;s pre-deployment security checklist off of the one
here. Notice I said &amp;ldquo;base&amp;rdquo; - this book provides sensible defaults, with the
rationale that you&lt;/p&gt;

&lt;h2 id=&#34;what-this-book-is-not:6083a88ee3411b0d17ce02d738f69d47&#34;&gt;What this book is &lt;em&gt;not&lt;/em&gt;&lt;/h2&gt;

&lt;p&gt;This book does not to teach you how to program. It assumes you know how to
program, or are actively learning to &lt;em&gt;right now&lt;/em&gt;. If the phrase &amp;ldquo;functions are
not first-class citizens in Java&amp;rdquo; doesn&amp;rsquo;t hold meaning, you will have trouble.
This book does not attempt to determine what a formal education for a &amp;ldquo;Software
Engineer&amp;rdquo; is - you&amp;rsquo;d be thinking of &lt;a href=&#34;http://sites.computer.org/ccse/SE2004Volume.pdf&#34;&gt;this
book&lt;/a&gt;. And you can keep that
book to yourself. Nobody here wants to talk about that book.&lt;/p&gt;

&lt;h1 id=&#34;how-to-read-this-book:6083a88ee3411b0d17ce02d738f69d47&#34;&gt;How to Read this Book&lt;/h1&gt;

&lt;p&gt;If you are new to the field, and you find yourself wondering on how to quickly
get up to speed and contributing professional-level work, I suggest quickly
reading through the entire book. Pay particular attention to the Key Insights at
the front of each chapter, and largely ignore any of the specific details. Also,
print out, or at least take note of, the checklists. Then, as you go about your
job, open up the pertinent section and pair-program with this book in hand.
Tasked with writing the deployment for the team&amp;rsquo;s microservice? Flip to
&amp;ldquo;Delivery&amp;rdquo;, and proceed.&lt;/p&gt;

&lt;p&gt;For those who feel comfortable in their work (perhaps dangerously so, hmmmm?), I
suggest scanning down the table of contents for interesting sections, and
dipping in where the whim or need takes you.&lt;/p&gt;

&lt;p&gt;If you&amp;rsquo;re starting a greenfield project (that means &amp;ldquo;brand-new&amp;rdquo;), and you want
to apply these principles from the get-go, then check out the Roadmap in the
back of the book. This is &lt;em&gt;a&lt;/em&gt; way of checking all the boxes.&lt;/p&gt;

&lt;h2 id=&#34;assumptions-and-biases:6083a88ee3411b0d17ce02d738f69d47&#34;&gt;Assumptions and Biases&lt;/h2&gt;

&lt;p&gt;I write from the perspective of a junior-becoming-intermediate engineer. I
started coding in 2011, and I started figuring out how to &lt;em&gt;engineer software&lt;/em&gt;
when I got my first job in 2014. Turns out there&amp;rsquo;s a lot a CS degree doesn&amp;rsquo;t
teach you when it comes to actually making software people can happily use and
easily maintain. Like everyone else, I cobbled together knowledge through
trial-and-error, code reviews, and Stack Overflow. I learn well from books, so I
also bought a number of them to learn from as well. Over time, ideas started to
come together.&lt;/p&gt;

&lt;p&gt;I assume you either have deployed, or are trying to deploy, working software for a
customer, whether that be yourself or someone who actually is giving you money.
Thus, I assume you can write software in the first place - this book will &lt;em&gt;not&lt;/em&gt;
attempt to bring you up to speed with the basics of programming. Little here is
what I would dare to call advanced, if only because calling what&amp;rsquo;s
presented here &amp;ldquo;advanced&amp;rdquo; leaves nothing to describe truly difficult concepts in
this world. But I&amp;rsquo;ve not shyed from including interesting design patterns or
techniques where called for, and if they confuse you a little at first, good.
That means you&amp;rsquo;re learning something. If it wasn&amp;rsquo;t confusing, you already
understood it, and you&amp;rsquo;re just collecting information.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>table of contents</title>
      <link>http://jad-b.github.io/seprimer/o16n/</link>
      <pubDate>Sat, 17 Dec 2016 11:38:38 -0500</pubDate>
      
      <guid>http://jad-b.github.io/seprimer/o16n/</guid>
      <description>&lt;ol&gt;
&lt;li&gt;Operationalization

&lt;ol&gt;
&lt;li&gt;The Motivation for Maintainability&lt;/li&gt;
&lt;li&gt;Configuration&lt;/li&gt;
&lt;li&gt;Monitoring

&lt;ol&gt;
&lt;li&gt;Testing versus Monitoring&lt;/li&gt;
&lt;li&gt;Logging

&lt;ol&gt;
&lt;li&gt;The attitude towards logging&lt;/li&gt;
&lt;li&gt;Machine vs. Human-readable&lt;/li&gt;
&lt;li&gt;What to log, how to log it&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;Metrics

&lt;ol&gt;
&lt;li&gt;What to measure&lt;/li&gt;
&lt;li&gt;Collecting&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;Alerting

&lt;ol&gt;
&lt;li&gt;Trends over thresholds&lt;/li&gt;
&lt;li&gt;Acting&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;Security&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>JIRA</title>
      <link>http://jad-b.github.io/seprimer/mgmt/JIRA/</link>
      <pubDate>Sat, 17 Dec 2016 11:37:26 -0500</pubDate>
      
      <guid>http://jad-b.github.io/seprimer/mgmt/JIRA/</guid>
      <description>

&lt;h1 id=&#34;jira:dec857d672aab2d969865b62d9a38594&#34;&gt;JIRA&lt;/h1&gt;

&lt;p&gt;I hesitate to even write this down.&lt;/p&gt;

&lt;h2 id=&#34;summary:dec857d672aab2d969865b62d9a38594&#34;&gt;Summary&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Understand the task hierarchy your company uses to divide bodies of work.
Where the company lacks definition, your team must supply it.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;vocabulary:dec857d672aab2d969865b62d9a38594&#34;&gt;Vocabulary&lt;/h2&gt;

&lt;dl&gt;
&lt;dt&gt;Product&lt;/dt&gt;
&lt;dd&gt;A self-contained, unified set of features that  come together to create
higher-level functionality.&lt;/dd&gt;
&lt;dt&gt;Project&lt;/dt&gt;
&lt;dd&gt;I&amp;rsquo;m not sure!&lt;/dd&gt;
&lt;dt&gt;Roadmap&lt;/dt&gt;
&lt;dd&gt;A time-based display of how different teams epics come together to build a
new product feature.&lt;/dd&gt;
&lt;dt&gt;Epic&lt;/dt&gt;
&lt;dd&gt;A multi-sprint body of work, unified by delivering a single feature of a
product.&lt;/dd&gt;
&lt;dt&gt;Story&lt;/dt&gt;
&lt;dd&gt;The smallest body of work that completely delivers new functionality.&lt;/dd&gt;
&lt;dt&gt;Bug&lt;/dt&gt;
&lt;dd&gt;A deviation from what was expected.&lt;/dd&gt;
&lt;/dl&gt;
</description>
    </item>
    
    <item>
      <title>index</title>
      <link>http://jad-b.github.io/seprimer/mgmt/</link>
      <pubDate>Sat, 17 Dec 2016 11:37:26 -0500</pubDate>
      
      <guid>http://jad-b.github.io/seprimer/mgmt/</guid>
      <description>&lt;ol&gt;
&lt;li&gt;Project Management

&lt;ol&gt;
&lt;li&gt;Planning your Project

&lt;ol&gt;
&lt;li&gt;Prototyping&lt;/li&gt;
&lt;li&gt;Iterating&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;Time Management&lt;/li&gt;
&lt;li&gt;Communicating

&lt;ol&gt;
&lt;li&gt;Communication Artifacts&lt;/li&gt;
&lt;li&gt;When to Have a Meeting

&lt;ol&gt;
&lt;li&gt;When &lt;em&gt;Not&lt;/em&gt; to Have a Meeting&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;Working with a Team

&lt;ol&gt;
&lt;li&gt;Team Size&lt;/li&gt;
&lt;li&gt;Parallelizing Work&lt;/li&gt;
&lt;li&gt;Setting Standards&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>Glossary</title>
      <link>http://jad-b.github.io/seprimer/Glossary/</link>
      <pubDate>Sat, 17 Dec 2016 11:37:15 -0500</pubDate>
      
      <guid>http://jad-b.github.io/seprimer/Glossary/</guid>
      <description>&lt;p&gt;&lt;strong&gt;normalize&lt;/strong&gt;:
    Convert to a standard format.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>index</title>
      <link>http://jad-b.github.io/seprimer/arch/</link>
      <pubDate>Sat, 17 Dec 2016 11:37:15 -0500</pubDate>
      
      <guid>http://jad-b.github.io/seprimer/arch/</guid>
      <description>&lt;ol&gt;
&lt;li&gt;Architecture

&lt;ol&gt;
&lt;li&gt;DataFlow&lt;/li&gt;
&lt;li&gt;Event-oriented&lt;/li&gt;
&lt;li&gt;Pub/Sub&lt;/li&gt;
&lt;li&gt;Push/Pull&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>index</title>
      <link>http://jad-b.github.io/seprimer/delivery/</link>
      <pubDate>Sat, 17 Dec 2016 11:37:11 -0500</pubDate>
      
      <guid>http://jad-b.github.io/seprimer/delivery/</guid>
      <description>&lt;ol&gt;
&lt;li&gt;Delivery

&lt;ol&gt;
&lt;li&gt;Versioning&lt;/li&gt;
&lt;li&gt;Continuous Integration&lt;/li&gt;
&lt;li&gt;Continuous Delivery&lt;/li&gt;
&lt;li&gt;Continuous Deployment&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
    <item>
      <title>table of contents</title>
      <link>http://jad-b.github.io/seprimer/design/</link>
      <pubDate>Sat, 17 Dec 2016 11:35:46 -0500</pubDate>
      
      <guid>http://jad-b.github.io/seprimer/design/</guid>
      <description>&lt;ol&gt;
&lt;li&gt;Software Design

&lt;ol&gt;
&lt;li&gt;Elegance through simplicity&lt;/li&gt;
&lt;li&gt;Microservice v. Monolith&lt;/li&gt;
&lt;li&gt;Error Handling&lt;/li&gt;
&lt;li&gt;Design Patterns

&lt;ol&gt;
&lt;li&gt;Interfaces&lt;/li&gt;
&lt;li&gt;Dependency Injection/Inversion&lt;/li&gt;
&lt;li&gt;Gang of Four Design Patterns

&lt;ol&gt;
&lt;li&gt;Adapter&lt;/li&gt;
&lt;li&gt;Command&lt;/li&gt;
&lt;li&gt;Decorator&lt;/li&gt;
&lt;li&gt;Facade&lt;/li&gt;
&lt;li&gt;Factory&lt;/li&gt;
&lt;li&gt;Observer&lt;/li&gt;
&lt;li&gt;Strategy&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;When to Do What&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
    </item>
    
  </channel>
</rss>